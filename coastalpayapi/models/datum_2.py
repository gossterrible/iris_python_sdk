# -*- coding: utf-8 -*-

"""
coastalpayapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from coastalpayapi.api_helper import APIHelper
from coastalpayapi.models.brief_user_info import BriefUserInfo
import os
from coastalpayapi.utilities.schema_validator_wrapper import SchemaValidatorWrapper
from jsonschema import ValidationError


class Datum2(object):

    """Implementation of the 'Datum2' model.

    TODO: type model description here.

    Attributes:
        id (int): Task Id
        user (BriefUserInfo): TODO: type description here.
        text (string): Task description
        date (datetime): Task Date and time in format ISO 8601
            (Y-m-d\TH:i:sP)
        confirmed (datetime): Task confirmed date and time in format ISO 8601
            (Y-m-d\TH:i:sP)

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "user": 'user',
        "text": 'text',
        "date": 'date',
        "confirmed": 'confirmed'
    }

    _optionals = [
        'id',
        'user',
        'text',
        'date',
        'confirmed',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 user=APIHelper.SKIP,
                 text=APIHelper.SKIP,
                 date=APIHelper.SKIP,
                 confirmed=APIHelper.SKIP):
        """Constructor for the Datum2 class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if user is not APIHelper.SKIP:
            self.user = user 
        if text is not APIHelper.SKIP:
            self.text = text 
        if date is not APIHelper.SKIP:
            self.date = APIHelper.RFC3339DateTime(date) if date else None 
        if confirmed is not APIHelper.SKIP:
            self.confirmed = APIHelper.RFC3339DateTime(confirmed) if confirmed else None 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        user = BriefUserInfo.from_dictionary(dictionary.get('user')) if 'user' in dictionary.keys() else APIHelper.SKIP 
        text = dictionary.get("text") if dictionary.get("text") else APIHelper.SKIP
        date = APIHelper.RFC3339DateTime.from_value(dictionary.get("date")).datetime if dictionary.get("date") else APIHelper.SKIP
        confirmed = APIHelper.RFC3339DateTime.from_value(dictionary.get("confirmed")).datetime if dictionary.get("confirmed") else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   user,
                   text,
                   date,
                   confirmed)

    @classmethod
    def validate(cls, val):
        """Validates value against class schema

        Args:
            val: the value to be validated

        Returns:
            boolean : if value is valid against schema.

        """
        file_name = os.path.basename(__file__).removesuffix(".py")
        return SchemaValidatorWrapper.getValidator(APIHelper.get_schema_path(os.path.abspath(__file__), file_name)).is_valid(val)
