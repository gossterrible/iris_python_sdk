# -*- coding: utf-8 -*-

"""
coastalpayapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from coastalpayapi.api_helper import APIHelper
import os
from coastalpayapi.utilities.schema_validator_wrapper import SchemaValidatorWrapper
from jsonschema import ValidationError


class Duplicate(object):

    """Implementation of the 'Duplicate' model.

    TODO: type model description here.

    Attributes:
        instance (int): Activity Id
        left (int): Padding from left
        right (int): Padding from right
        top (int): Padding from top
        bottom (int): Padding from bottom
        height (int): Height of field
        width (int): Width of field
        page_number (int): Page number

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "instance": 'instance',
        "left": 'left',
        "right": 'right',
        "top": 'top',
        "bottom": 'bottom',
        "height": 'height',
        "width": 'width',
        "page_number": 'page_number'
    }

    _optionals = [
        'instance',
        'left',
        'right',
        'top',
        'bottom',
        'height',
        'width',
        'page_number',
    ]

    def __init__(self,
                 instance=APIHelper.SKIP,
                 left=APIHelper.SKIP,
                 right=APIHelper.SKIP,
                 top=APIHelper.SKIP,
                 bottom=APIHelper.SKIP,
                 height=APIHelper.SKIP,
                 width=APIHelper.SKIP,
                 page_number=APIHelper.SKIP):
        """Constructor for the Duplicate class"""

        # Initialize members of the class
        if instance is not APIHelper.SKIP:
            self.instance = instance 
        if left is not APIHelper.SKIP:
            self.left = left 
        if right is not APIHelper.SKIP:
            self.right = right 
        if top is not APIHelper.SKIP:
            self.top = top 
        if bottom is not APIHelper.SKIP:
            self.bottom = bottom 
        if height is not APIHelper.SKIP:
            self.height = height 
        if width is not APIHelper.SKIP:
            self.width = width 
        if page_number is not APIHelper.SKIP:
            self.page_number = page_number 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        instance = dictionary.get("instance") if dictionary.get("instance") else APIHelper.SKIP
        left = dictionary.get("left") if dictionary.get("left") else APIHelper.SKIP
        right = dictionary.get("right") if dictionary.get("right") else APIHelper.SKIP
        top = dictionary.get("top") if dictionary.get("top") else APIHelper.SKIP
        bottom = dictionary.get("bottom") if dictionary.get("bottom") else APIHelper.SKIP
        height = dictionary.get("height") if dictionary.get("height") else APIHelper.SKIP
        width = dictionary.get("width") if dictionary.get("width") else APIHelper.SKIP
        page_number = dictionary.get("page_number") if dictionary.get("page_number") else APIHelper.SKIP
        # Return an object of this model
        return cls(instance,
                   left,
                   right,
                   top,
                   bottom,
                   height,
                   width,
                   page_number)

    @classmethod
    def validate(cls, val):
        """Validates value against class schema

        Args:
            val: the value to be validated

        Returns:
            boolean : if value is valid against schema.

        """
        file_name = os.path.basename(__file__).removesuffix(".py")
        return SchemaValidatorWrapper.getValidator(APIHelper.get_schema_path(os.path.abspath(__file__), file_name)).is_valid(val)
