# -*- coding: utf-8 -*-

"""
coastalpayapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from coastalpayapi.api_helper import APIHelper
from coastalpayapi.models.brief_campaign_info import BriefCampaignInfo
from coastalpayapi.models.brief_category_info import BriefCategoryInfo
from coastalpayapi.models.brief_group_info import BriefGroupInfo
from coastalpayapi.models.brief_source_info import BriefSourceInfo
from coastalpayapi.models.brief_status_info import BriefStatusInfo
import os
from coastalpayapi.utilities.schema_validator_wrapper import SchemaValidatorWrapper
from jsonschema import ValidationError


class BriefLeadInfo(object):

    """Implementation of the 'BriefLeadInfo' model.

    TODO: type model description here.

    Attributes:
        id (int): Lead Id
        mid (int): Lead merchant Id
        name (string): Lead name
        group (BriefGroupInfo): TODO: type description here.
        category (BriefCategoryInfo): TODO: type description here.
        status (BriefStatusInfo): TODO: type description here.
        campaign (BriefCampaignInfo): TODO: type description here.
        source (BriefSourceInfo): TODO: type description here.
        created (datetime): Lead creation date (Y-m-d\TH:i:sP)
        modified (datetime): Lead modification date (Y-m-d\TH:i:sP)

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "mid": 'mid',
        "name": 'name',
        "group": 'group',
        "category": 'category',
        "status": 'status',
        "campaign": 'campaign',
        "source": 'source',
        "created": 'created',
        "modified": 'modified'
    }

    _optionals = [
        'id',
        'mid',
        'name',
        'group',
        'category',
        'status',
        'campaign',
        'source',
        'created',
        'modified',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 mid=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 group=APIHelper.SKIP,
                 category=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 campaign=APIHelper.SKIP,
                 source=APIHelper.SKIP,
                 created=APIHelper.SKIP,
                 modified=APIHelper.SKIP):
        """Constructor for the BriefLeadInfo class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if mid is not APIHelper.SKIP:
            self.mid = mid 
        if name is not APIHelper.SKIP:
            self.name = name 
        if group is not APIHelper.SKIP:
            self.group = group 
        if category is not APIHelper.SKIP:
            self.category = category 
        if status is not APIHelper.SKIP:
            self.status = status 
        if campaign is not APIHelper.SKIP:
            self.campaign = campaign 
        if source is not APIHelper.SKIP:
            self.source = source 
        if created is not APIHelper.SKIP:
            self.created = APIHelper.RFC3339DateTime(created) if created else None 
        if modified is not APIHelper.SKIP:
            self.modified = APIHelper.RFC3339DateTime(modified) if modified else None 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        mid = dictionary.get("mid") if dictionary.get("mid") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        group = BriefGroupInfo.from_dictionary(dictionary.get('group')) if 'group' in dictionary.keys() else APIHelper.SKIP 
        category = BriefCategoryInfo.from_dictionary(dictionary.get('category')) if 'category' in dictionary.keys() else APIHelper.SKIP 
        status = BriefStatusInfo.from_dictionary(dictionary.get('status')) if 'status' in dictionary.keys() else APIHelper.SKIP 
        campaign = BriefCampaignInfo.from_dictionary(dictionary.get('campaign')) if 'campaign' in dictionary.keys() else APIHelper.SKIP 
        source = BriefSourceInfo.from_dictionary(dictionary.get('source')) if 'source' in dictionary.keys() else APIHelper.SKIP 
        created = APIHelper.RFC3339DateTime.from_value(dictionary.get("created")).datetime if dictionary.get("created") else APIHelper.SKIP
        modified = APIHelper.RFC3339DateTime.from_value(dictionary.get("modified")).datetime if dictionary.get("modified") else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   mid,
                   name,
                   group,
                   category,
                   status,
                   campaign,
                   source,
                   created,
                   modified)

    @classmethod
    def validate(cls, val):
        """Validates value against class schema

        Args:
            val: the value to be validated

        Returns:
            boolean : if value is valid against schema.

        """
        file_name = os.path.basename(__file__).removesuffix(".py")
        return SchemaValidatorWrapper.getValidator(APIHelper.get_schema_path(os.path.abspath(__file__), file_name)).is_valid(val)
