# -*- coding: utf-8 -*-

"""
coastalpayapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from coastalpayapi.api_helper import APIHelper
import os
from coastalpayapi.utilities.schema_validator_wrapper import SchemaValidatorWrapper
from jsonschema import ValidationError


class SourceActivity(object):

    """Implementation of the 'SourceActivity' model.

    TODO: type model description here.

    Attributes:
        id (int): Activity Id
        new_value (string): New value of activity
        assigned_by (int): User Id
        assigned_at (datetime): Assigned date (Y-m-d\TH:i:sP)

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "new_value": 'newValue',
        "assigned_by": 'assignedBy',
        "assigned_at": 'assignedAt'
    }

    _optionals = [
        'id',
        'new_value',
        'assigned_by',
        'assigned_at',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 new_value=APIHelper.SKIP,
                 assigned_by=APIHelper.SKIP,
                 assigned_at=APIHelper.SKIP):
        """Constructor for the SourceActivity class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if new_value is not APIHelper.SKIP:
            self.new_value = new_value 
        if assigned_by is not APIHelper.SKIP:
            self.assigned_by = assigned_by 
        if assigned_at is not APIHelper.SKIP:
            self.assigned_at = APIHelper.RFC3339DateTime(assigned_at) if assigned_at else None 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        new_value = dictionary.get("newValue") if dictionary.get("newValue") else APIHelper.SKIP
        assigned_by = dictionary.get("assignedBy") if dictionary.get("assignedBy") else APIHelper.SKIP
        assigned_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("assignedAt")).datetime if dictionary.get("assignedAt") else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   new_value,
                   assigned_by,
                   assigned_at)

    @classmethod
    def validate(cls, val):
        """Validates value against class schema

        Args:
            val: the value to be validated

        Returns:
            boolean : if value is valid against schema.

        """
        file_name = os.path.basename(__file__).removesuffix(".py")
        return SchemaValidatorWrapper.getValidator(APIHelper.get_schema_path(os.path.abspath(__file__), file_name)).is_valid(val)
