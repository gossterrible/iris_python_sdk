# -*- coding: utf-8 -*-

"""
coastalpayapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from coastalpayapi.api_helper import APIHelper
import os
from coastalpayapi.utilities.schema_validator_wrapper import SchemaValidatorWrapper
from jsonschema import ValidationError


class BriefUserInfoWithClass(object):

    """Implementation of the 'BriefUserInfoWithClass' model.

    TODO: type model description here.

    Attributes:
        id (int): User Id
        username (string): User username
        full_name (string): User name
        email (string): User email
        status (string): User status
        mclass (string): User class

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "username": 'username',
        "full_name": 'full_name',
        "email": 'email',
        "status": 'status',
        "mclass": 'class'
    }

    _optionals = [
        'id',
        'username',
        'full_name',
        'email',
        'status',
        'mclass',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 username=APIHelper.SKIP,
                 full_name=APIHelper.SKIP,
                 email=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 mclass=APIHelper.SKIP):
        """Constructor for the BriefUserInfoWithClass class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if username is not APIHelper.SKIP:
            self.username = username 
        if full_name is not APIHelper.SKIP:
            self.full_name = full_name 
        if email is not APIHelper.SKIP:
            self.email = email 
        if status is not APIHelper.SKIP:
            self.status = status 
        if mclass is not APIHelper.SKIP:
            self.mclass = mclass 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        username = dictionary.get("username") if dictionary.get("username") else APIHelper.SKIP
        full_name = dictionary.get("full_name") if dictionary.get("full_name") else APIHelper.SKIP
        email = dictionary.get("email") if dictionary.get("email") else APIHelper.SKIP
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        mclass = dictionary.get("class") if dictionary.get("class") else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   username,
                   full_name,
                   email,
                   status,
                   mclass)

    @classmethod
    def validate(cls, val):
        """Validates value against class schema

        Args:
            val: the value to be validated

        Returns:
            boolean : if value is valid against schema.

        """
        file_name = os.path.basename(__file__).removesuffix(".py")
        return SchemaValidatorWrapper.getValidator(APIHelper.get_schema_path(os.path.abspath(__file__), file_name)).is_valid(val)
