# -*- coding: utf-8 -*-

"""
coastalpayapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from coastalpayapi.api_helper import APIHelper
import os
from coastalpayapi.utilities.schema_validator_wrapper import SchemaValidatorWrapper
from jsonschema import ValidationError


class Copy(object):

    """Implementation of the 'Copy' model.

    Copy button properties

    Attributes:
        title (string): Button label
        mfrom (object): Copy from
        to (object): Copy to

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "title": 'title',
        "mfrom": 'from',
        "to": 'to'
    }

    _optionals = [
        'title',
        'mfrom',
        'to',
    ]

    def __init__(self,
                 title=APIHelper.SKIP,
                 mfrom=APIHelper.SKIP,
                 to=APIHelper.SKIP):
        """Constructor for the Copy class"""

        # Initialize members of the class
        if title is not APIHelper.SKIP:
            self.title = title 
        if mfrom is not APIHelper.SKIP:
            self.mfrom = mfrom 
        if to is not APIHelper.SKIP:
            self.to = to 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        title = dictionary.get("title") if dictionary.get("title") else APIHelper.SKIP
        mfrom = dictionary.get("from") if dictionary.get("from") else APIHelper.SKIP
        to = dictionary.get("to") if dictionary.get("to") else APIHelper.SKIP
        # Return an object of this model
        return cls(title,
                   mfrom,
                   to)

    @classmethod
    def validate(cls, val):
        """Validates value against class schema

        Args:
            val: the value to be validated

        Returns:
            boolean : if value is valid against schema.

        """
        file_name = os.path.basename(__file__).removesuffix(".py")
        return SchemaValidatorWrapper.getValidator(APIHelper.get_schema_path(os.path.abspath(__file__), file_name)).is_valid(val)
