# -*- coding: utf-8 -*-

"""
coastalpayapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from coastalpayapi.api_helper import APIHelper
import os
from coastalpayapi.utilities.schema_validator_wrapper import SchemaValidatorWrapper
from jsonschema import ValidationError


class ZipcodeAutocomplete(object):

    """Implementation of the 'ZipcodeAutocomplete' model.

    ZIP Code autofill properties

    Attributes:
        city (object): City fields
        state (object): State fields
        zipcode (object): Zipcode fields

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "city": 'city',
        "state": 'state',
        "zipcode": 'zipcode'
    }

    _optionals = [
        'city',
        'state',
        'zipcode',
    ]

    def __init__(self,
                 city=APIHelper.SKIP,
                 state=APIHelper.SKIP,
                 zipcode=APIHelper.SKIP):
        """Constructor for the ZipcodeAutocomplete class"""

        # Initialize members of the class
        if city is not APIHelper.SKIP:
            self.city = city 
        if state is not APIHelper.SKIP:
            self.state = state 
        if zipcode is not APIHelper.SKIP:
            self.zipcode = zipcode 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        city = dictionary.get("city") if dictionary.get("city") else APIHelper.SKIP
        state = dictionary.get("state") if dictionary.get("state") else APIHelper.SKIP
        zipcode = dictionary.get("zipcode") if dictionary.get("zipcode") else APIHelper.SKIP
        # Return an object of this model
        return cls(city,
                   state,
                   zipcode)

    @classmethod
    def validate(cls, val):
        """Validates value against class schema

        Args:
            val: the value to be validated

        Returns:
            boolean : if value is valid against schema.

        """
        file_name = os.path.basename(__file__).removesuffix(".py")
        return SchemaValidatorWrapper.getValidator(APIHelper.get_schema_path(os.path.abspath(__file__), file_name)).is_valid(val)
