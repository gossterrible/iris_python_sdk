# -*- coding: utf-8 -*-

"""
coastalpayapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from coastalpayapi.api_helper import APIHelper
from coastalpayapi.models.brief_tab_info import BriefTabInfo
import os
from coastalpayapi.utilities.schema_validator_wrapper import SchemaValidatorWrapper
from jsonschema import ValidationError


class Datum1(object):

    """Implementation of the 'Datum1' model.

    TODO: type model description here.

    Attributes:
        id (int): Note Id
        sticky (Sticky1Enum): Pin note to top
        tab (BriefTabInfo): TODO: type description here.
        text (string): Note text
        created (string): Note creation date and time (ISO-8601)
        modified (string): Note modification date and time (ISO-8601)

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "sticky": 'sticky',
        "tab": 'tab',
        "text": 'text',
        "created": 'created',
        "modified": 'modified'
    }

    _optionals = [
        'id',
        'sticky',
        'tab',
        'text',
        'created',
        'modified',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 sticky=APIHelper.SKIP,
                 tab=APIHelper.SKIP,
                 text=APIHelper.SKIP,
                 created=APIHelper.SKIP,
                 modified=APIHelper.SKIP):
        """Constructor for the Datum1 class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if sticky is not APIHelper.SKIP:
            self.sticky = sticky 
        if tab is not APIHelper.SKIP:
            self.tab = tab 
        if text is not APIHelper.SKIP:
            self.text = text 
        if created is not APIHelper.SKIP:
            self.created = created 
        if modified is not APIHelper.SKIP:
            self.modified = modified 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        sticky = dictionary.get("sticky") if dictionary.get("sticky") else APIHelper.SKIP
        tab = BriefTabInfo.from_dictionary(dictionary.get('tab')) if 'tab' in dictionary.keys() else APIHelper.SKIP 
        text = dictionary.get("text") if dictionary.get("text") else APIHelper.SKIP
        created = dictionary.get("created") if dictionary.get("created") else APIHelper.SKIP
        modified = dictionary.get("modified") if dictionary.get("modified") else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   sticky,
                   tab,
                   text,
                   created,
                   modified)

    @classmethod
    def validate(cls, val):
        """Validates value against class schema

        Args:
            val: the value to be validated

        Returns:
            boolean : if value is valid against schema.

        """
        file_name = os.path.basename(__file__).removesuffix(".py")
        return SchemaValidatorWrapper.getValidator(APIHelper.get_schema_path(os.path.abspath(__file__), file_name)).is_valid(val)
