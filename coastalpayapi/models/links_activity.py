# -*- coding: utf-8 -*-

"""
coastalpayapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from coastalpayapi.api_helper import APIHelper
import os
from coastalpayapi.utilities.schema_validator_wrapper import SchemaValidatorWrapper
from jsonschema import ValidationError


class LinksActivity(object):

    """Implementation of the 'LinksActivity' model.

    TODO: type model description here.

    Attributes:
        id (int): Activity Id
        status (StatusEnum): Status of link
        lead (string): Lead Id
        merchant (string): Merchant Id
        linked_by (int): User Id
        linked_at (datetime): Linking date (Y-m-d\TH:i:sP)

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "status": 'status',
        "lead": 'lead',
        "merchant": 'merchant',
        "linked_by": 'linkedBy',
        "linked_at": 'linkedAt'
    }

    _optionals = [
        'id',
        'status',
        'lead',
        'merchant',
        'linked_by',
        'linked_at',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 lead=APIHelper.SKIP,
                 merchant=APIHelper.SKIP,
                 linked_by=APIHelper.SKIP,
                 linked_at=APIHelper.SKIP):
        """Constructor for the LinksActivity class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if status is not APIHelper.SKIP:
            self.status = status 
        if lead is not APIHelper.SKIP:
            self.lead = lead 
        if merchant is not APIHelper.SKIP:
            self.merchant = merchant 
        if linked_by is not APIHelper.SKIP:
            self.linked_by = linked_by 
        if linked_at is not APIHelper.SKIP:
            self.linked_at = APIHelper.RFC3339DateTime(linked_at) if linked_at else None 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        lead = dictionary.get("lead") if dictionary.get("lead") else APIHelper.SKIP
        merchant = dictionary.get("merchant") if dictionary.get("merchant") else APIHelper.SKIP
        linked_by = dictionary.get("linkedBy") if dictionary.get("linkedBy") else APIHelper.SKIP
        linked_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("linkedAt")).datetime if dictionary.get("linkedAt") else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   status,
                   lead,
                   merchant,
                   linked_by,
                   linked_at)

    @classmethod
    def validate(cls, val):
        """Validates value against class schema

        Args:
            val: the value to be validated

        Returns:
            boolean : if value is valid against schema.

        """
        file_name = os.path.basename(__file__).removesuffix(".py")
        return SchemaValidatorWrapper.getValidator(APIHelper.get_schema_path(os.path.abspath(__file__), file_name)).is_valid(val)
