# -*- coding: utf-8 -*-

"""
coastalpayapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from coastalpayapi.api_helper import APIHelper
import os
from coastalpayapi.utilities.schema_validator_wrapper import SchemaValidatorWrapper
from jsonschema import ValidationError


class Datum4(object):

    """Implementation of the 'Datum4' model.

    TODO: type model description here.

    Attributes:
        status (string): TODO: type description here.
        url (string): TODO: type description here.
        template_id (string): TODO: type description here.
        template_name (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "status": 'status',
        "url": 'url',
        "template_id": 'templateId',
        "template_name": 'templateName'
    }

    _optionals = [
        'status',
        'url',
        'template_id',
        'template_name',
    ]

    def __init__(self,
                 status=APIHelper.SKIP,
                 url=APIHelper.SKIP,
                 template_id=APIHelper.SKIP,
                 template_name=APIHelper.SKIP):
        """Constructor for the Datum4 class"""

        # Initialize members of the class
        if status is not APIHelper.SKIP:
            self.status = status 
        if url is not APIHelper.SKIP:
            self.url = url 
        if template_id is not APIHelper.SKIP:
            self.template_id = template_id 
        if template_name is not APIHelper.SKIP:
            self.template_name = template_name 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        url = dictionary.get("url") if dictionary.get("url") else APIHelper.SKIP
        template_id = dictionary.get("templateId") if dictionary.get("templateId") else APIHelper.SKIP
        template_name = dictionary.get("templateName") if dictionary.get("templateName") else APIHelper.SKIP
        # Return an object of this model
        return cls(status,
                   url,
                   template_id,
                   template_name)

    @classmethod
    def validate(cls, val):
        """Validates value against class schema

        Args:
            val: the value to be validated

        Returns:
            boolean : if value is valid against schema.

        """
        file_name = os.path.basename(__file__).removesuffix(".py")
        return SchemaValidatorWrapper.getValidator(APIHelper.get_schema_path(os.path.abspath(__file__), file_name)).is_valid(val)
