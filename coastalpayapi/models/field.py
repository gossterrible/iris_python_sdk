# -*- coding: utf-8 -*-

"""
coastalpayapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from coastalpayapi.api_helper import APIHelper
import os
from coastalpayapi.utilities.schema_validator_wrapper import SchemaValidatorWrapper
from jsonschema import ValidationError


class Field(object):

    """Implementation of the 'Field' model.

    TODO: type model description here.

    Attributes:
        id (string): Field Id
        record (string): Record Id
        value (string): Field value

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "value": 'value',
        "record": 'record'
    }

    _optionals = [
        'record',
    ]

    def __init__(self,
                 id=None,
                 value=None,
                 record=APIHelper.SKIP):
        """Constructor for the Field class"""

        # Initialize members of the class
        self.id = id 
        if record is not APIHelper.SKIP:
            self.record = record 
        self.value = value 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        id = dictionary.get("id") if dictionary.get("id") else None
        value = dictionary.get("value") if dictionary.get("value") else None
        record = dictionary.get("record") if dictionary.get("record") else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   value,
                   record)

    @classmethod
    def validate(cls, val):
        """Validates value against class schema

        Args:
            val: the value to be validated

        Returns:
            boolean : if value is valid against schema.

        """
        file_name = os.path.basename(__file__).removesuffix(".py")
        return SchemaValidatorWrapper.getValidator(APIHelper.get_schema_path(os.path.abspath(__file__), file_name)).is_valid(val)
