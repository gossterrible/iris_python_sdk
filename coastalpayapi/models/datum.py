# -*- coding: utf-8 -*-

"""
coastalpayapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from coastalpayapi.api_helper import APIHelper
from coastalpayapi.models.value import Value
import os
from coastalpayapi.utilities.schema_validator_wrapper import SchemaValidatorWrapper
from jsonschema import ValidationError


class Datum(object):

    """Implementation of the 'Datum' model.

    TODO: type model description here.

    Attributes:
        id (int): Template Id
        name (string): Template name
        created_by (int): Template creator
        created_at (datetime): Template modification date and time (ISO-8601)
        modified_by (int): Template modification date and time (ISO-8601)
        modified_at (datetime): Last template editor
        fields_changed_by (int): Last fields editor
        fields_changed_at (datetime): Last fileds modification date and time
            (ISO-8601)
        values (list of Value): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "name": 'name',
        "created_by": 'created_by',
        "created_at": 'created_at',
        "modified_by": 'modified_by',
        "modified_at": 'modified_at',
        "fields_changed_by": 'fields_changed_by',
        "fields_changed_at": 'fields_changed_at',
        "values": 'values'
    }

    _optionals = [
        'id',
        'name',
        'created_by',
        'created_at',
        'modified_by',
        'modified_at',
        'fields_changed_by',
        'fields_changed_at',
        'values',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 created_by=APIHelper.SKIP,
                 created_at=APIHelper.SKIP,
                 modified_by=APIHelper.SKIP,
                 modified_at=APIHelper.SKIP,
                 fields_changed_by=APIHelper.SKIP,
                 fields_changed_at=APIHelper.SKIP,
                 values=APIHelper.SKIP):
        """Constructor for the Datum class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if name is not APIHelper.SKIP:
            self.name = name 
        if created_by is not APIHelper.SKIP:
            self.created_by = created_by 
        if created_at is not APIHelper.SKIP:
            self.created_at = APIHelper.RFC3339DateTime(created_at) if created_at else None 
        if modified_by is not APIHelper.SKIP:
            self.modified_by = modified_by 
        if modified_at is not APIHelper.SKIP:
            self.modified_at = APIHelper.RFC3339DateTime(modified_at) if modified_at else None 
        if fields_changed_by is not APIHelper.SKIP:
            self.fields_changed_by = fields_changed_by 
        if fields_changed_at is not APIHelper.SKIP:
            self.fields_changed_at = APIHelper.RFC3339DateTime(fields_changed_at) if fields_changed_at else None 
        if values is not APIHelper.SKIP:
            self.values = values 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        created_by = dictionary.get("created_by") if dictionary.get("created_by") else APIHelper.SKIP
        created_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("created_at")).datetime if dictionary.get("created_at") else APIHelper.SKIP
        modified_by = dictionary.get("modified_by") if dictionary.get("modified_by") else APIHelper.SKIP
        modified_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("modified_at")).datetime if dictionary.get("modified_at") else APIHelper.SKIP
        fields_changed_by = dictionary.get("fields_changed_by") if dictionary.get("fields_changed_by") else APIHelper.SKIP
        fields_changed_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("fields_changed_at")).datetime if dictionary.get("fields_changed_at") else APIHelper.SKIP
        values = None
        if dictionary.get('values') is not None:
            values = [Value.from_dictionary(x) for x in dictionary.get('values')]
        else:
            values = APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   name,
                   created_by,
                   created_at,
                   modified_by,
                   modified_at,
                   fields_changed_by,
                   fields_changed_at,
                   values)

    @classmethod
    def validate(cls, val):
        """Validates value against class schema

        Args:
            val: the value to be validated

        Returns:
            boolean : if value is valid against schema.

        """
        file_name = os.path.basename(__file__).removesuffix(".py")
        return SchemaValidatorWrapper.getValidator(APIHelper.get_schema_path(os.path.abspath(__file__), file_name)).is_valid(val)
