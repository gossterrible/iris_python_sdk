# -*- coding: utf-8 -*-

"""
coastalpayapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from coastalpayapi.api_helper import APIHelper
from coastalpayapi.models.brief_user_info import BriefUserInfo
import os
from coastalpayapi.utilities.schema_validator_wrapper import SchemaValidatorWrapper
from jsonschema import ValidationError


class LeadAppointment(object):

    """Implementation of the 'LeadAppointment' model.

    TODO: type model description here.

    Attributes:
        id (int): Appointment Id
        user (BriefUserInfo): TODO: type description here.
        set_for (BriefUserInfo): TODO: type description here.
        set_at (datetime): Appointment creation date and time in format ISO
            8601 (Y-m-d\TH:i:sP)
        set_by (BriefUserInfo): TODO: type description here.
        modified (datetime): Appointment modification date and time in format
            ISO 8601 (Y-m-d\TH:i:sP)
        modified_by (BriefUserInfo): TODO: type description here.
        text (string): Appointment description
        date (datetime): Appointment date and time in format ISO 8601
            (Y-m-d\TH:i:sP)
        date_end (datetime): Appointment end date and time in format ISO 8601
            (Y-m-d\TH:i:sP)
        done (DoneEnum): Is appointment done?
        confirmed (datetime): Appointment confirmed date and time in format
            ISO 8601 (Y-m-d\TH:i:sP)
        confirmed_by (BriefUserInfo): TODO: type description here.
        seen (datetime): Appointment seen date and time in format ISO 8601
            (Y-m-d\TH:i:sP)
        seen_by (BriefUserInfo): TODO: type description here.
        rescheduled (datetime): Appointment rescheduled date and time in
            format ISO 8601 (Y-m-d\TH:i:sP)
        rescheduled_by (BriefUserInfo): TODO: type description here.
        rescheduled_count (int): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "user": 'user',
        "set_for": 'set_for',
        "set_at": 'set_at',
        "set_by": 'set_by',
        "modified": 'modified',
        "modified_by": 'modified_by',
        "text": 'text',
        "date": 'date',
        "date_end": 'date_end',
        "done": 'done',
        "confirmed": 'confirmed',
        "confirmed_by": 'confirmed_by',
        "seen": 'seen',
        "seen_by": 'seen_by',
        "rescheduled": 'rescheduled',
        "rescheduled_by": 'rescheduled_by',
        "rescheduled_count": 'rescheduled_count'
    }

    _optionals = [
        'id',
        'user',
        'set_for',
        'set_at',
        'set_by',
        'modified',
        'modified_by',
        'text',
        'date',
        'date_end',
        'done',
        'confirmed',
        'confirmed_by',
        'seen',
        'seen_by',
        'rescheduled',
        'rescheduled_by',
        'rescheduled_count',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 user=APIHelper.SKIP,
                 set_for=APIHelper.SKIP,
                 set_at=APIHelper.SKIP,
                 set_by=APIHelper.SKIP,
                 modified=APIHelper.SKIP,
                 modified_by=APIHelper.SKIP,
                 text=APIHelper.SKIP,
                 date=APIHelper.SKIP,
                 date_end=APIHelper.SKIP,
                 done=APIHelper.SKIP,
                 confirmed=APIHelper.SKIP,
                 confirmed_by=APIHelper.SKIP,
                 seen=APIHelper.SKIP,
                 seen_by=APIHelper.SKIP,
                 rescheduled=APIHelper.SKIP,
                 rescheduled_by=APIHelper.SKIP,
                 rescheduled_count=APIHelper.SKIP):
        """Constructor for the LeadAppointment class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if user is not APIHelper.SKIP:
            self.user = user 
        if set_for is not APIHelper.SKIP:
            self.set_for = set_for 
        if set_at is not APIHelper.SKIP:
            self.set_at = APIHelper.RFC3339DateTime(set_at) if set_at else None 
        if set_by is not APIHelper.SKIP:
            self.set_by = set_by 
        if modified is not APIHelper.SKIP:
            self.modified = APIHelper.RFC3339DateTime(modified) if modified else None 
        if modified_by is not APIHelper.SKIP:
            self.modified_by = modified_by 
        if text is not APIHelper.SKIP:
            self.text = text 
        if date is not APIHelper.SKIP:
            self.date = APIHelper.RFC3339DateTime(date) if date else None 
        if date_end is not APIHelper.SKIP:
            self.date_end = APIHelper.RFC3339DateTime(date_end) if date_end else None 
        if done is not APIHelper.SKIP:
            self.done = done 
        if confirmed is not APIHelper.SKIP:
            self.confirmed = APIHelper.RFC3339DateTime(confirmed) if confirmed else None 
        if confirmed_by is not APIHelper.SKIP:
            self.confirmed_by = confirmed_by 
        if seen is not APIHelper.SKIP:
            self.seen = APIHelper.RFC3339DateTime(seen) if seen else None 
        if seen_by is not APIHelper.SKIP:
            self.seen_by = seen_by 
        if rescheduled is not APIHelper.SKIP:
            self.rescheduled = APIHelper.RFC3339DateTime(rescheduled) if rescheduled else None 
        if rescheduled_by is not APIHelper.SKIP:
            self.rescheduled_by = rescheduled_by 
        if rescheduled_count is not APIHelper.SKIP:
            self.rescheduled_count = rescheduled_count 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        user = BriefUserInfo.from_dictionary(dictionary.get('user')) if 'user' in dictionary.keys() else APIHelper.SKIP 
        set_for = BriefUserInfo.from_dictionary(dictionary.get('set_for')) if 'set_for' in dictionary.keys() else APIHelper.SKIP 
        set_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("set_at")).datetime if dictionary.get("set_at") else APIHelper.SKIP
        set_by = BriefUserInfo.from_dictionary(dictionary.get('set_by')) if 'set_by' in dictionary.keys() else APIHelper.SKIP 
        modified = APIHelper.RFC3339DateTime.from_value(dictionary.get("modified")).datetime if dictionary.get("modified") else APIHelper.SKIP
        modified_by = BriefUserInfo.from_dictionary(dictionary.get('modified_by')) if 'modified_by' in dictionary.keys() else APIHelper.SKIP 
        text = dictionary.get("text") if dictionary.get("text") else APIHelper.SKIP
        date = APIHelper.RFC3339DateTime.from_value(dictionary.get("date")).datetime if dictionary.get("date") else APIHelper.SKIP
        date_end = APIHelper.RFC3339DateTime.from_value(dictionary.get("date_end")).datetime if dictionary.get("date_end") else APIHelper.SKIP
        done = dictionary.get("done") if dictionary.get("done") else APIHelper.SKIP
        confirmed = APIHelper.RFC3339DateTime.from_value(dictionary.get("confirmed")).datetime if dictionary.get("confirmed") else APIHelper.SKIP
        confirmed_by = BriefUserInfo.from_dictionary(dictionary.get('confirmed_by')) if 'confirmed_by' in dictionary.keys() else APIHelper.SKIP 
        seen = APIHelper.RFC3339DateTime.from_value(dictionary.get("seen")).datetime if dictionary.get("seen") else APIHelper.SKIP
        seen_by = BriefUserInfo.from_dictionary(dictionary.get('seen_by')) if 'seen_by' in dictionary.keys() else APIHelper.SKIP 
        rescheduled = APIHelper.RFC3339DateTime.from_value(dictionary.get("rescheduled")).datetime if dictionary.get("rescheduled") else APIHelper.SKIP
        rescheduled_by = BriefUserInfo.from_dictionary(dictionary.get('rescheduled_by')) if 'rescheduled_by' in dictionary.keys() else APIHelper.SKIP 
        rescheduled_count = dictionary.get("rescheduled_count") if dictionary.get("rescheduled_count") else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   user,
                   set_for,
                   set_at,
                   set_by,
                   modified,
                   modified_by,
                   text,
                   date,
                   date_end,
                   done,
                   confirmed,
                   confirmed_by,
                   seen,
                   seen_by,
                   rescheduled,
                   rescheduled_by,
                   rescheduled_count)

    @classmethod
    def validate(cls, val):
        """Validates value against class schema

        Args:
            val: the value to be validated

        Returns:
            boolean : if value is valid against schema.

        """
        file_name = os.path.basename(__file__).removesuffix(".py")
        return SchemaValidatorWrapper.getValidator(APIHelper.get_schema_path(os.path.abspath(__file__), file_name)).is_valid(val)
