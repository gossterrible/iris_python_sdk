# -*- coding: utf-8 -*-

"""
coastalpayapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from coastalpayapi.api_helper import APIHelper
from coastalpayapi.models.info import Info
import os
from coastalpayapi.utilities.schema_validator_wrapper import SchemaValidatorWrapper
from jsonschema import ValidationError


class ApplicationField(object):

    """Implementation of the 'ApplicationField' model.

    TODO: type model description here.

    Attributes:
        id (int): Application field Id
        mfrom (int): Application field from field Id
        record (int): Application field record
        to (string): Name of mapped field
        to_alt (string): Alt of mapped field
        to_type (string): Type of mapped field
        special (Special1Enum): Special type of mapped field
        info (list of Info): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mfrom": 'from',
        "id": 'id',
        "record": 'record',
        "to": 'to',
        "to_alt": 'toAlt',
        "to_type": 'toType',
        "special": 'special',
        "info": 'info'
    }

    _optionals = [
        'id',
        'record',
        'to',
        'to_alt',
        'to_type',
        'special',
        'info',
    ]

    def __init__(self,
                 mfrom=None,
                 id=APIHelper.SKIP,
                 record=APIHelper.SKIP,
                 to=APIHelper.SKIP,
                 to_alt=APIHelper.SKIP,
                 to_type=APIHelper.SKIP,
                 special='null',
                 info=APIHelper.SKIP):
        """Constructor for the ApplicationField class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        self.mfrom = mfrom 
        if record is not APIHelper.SKIP:
            self.record = record 
        if to is not APIHelper.SKIP:
            self.to = to 
        if to_alt is not APIHelper.SKIP:
            self.to_alt = to_alt 
        if to_type is not APIHelper.SKIP:
            self.to_type = to_type 
        self.special = special 
        if info is not APIHelper.SKIP:
            self.info = info 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        mfrom = dictionary.get("from") if dictionary.get("from") else None
        id = dictionary.get("id") if dictionary.get("id") else APIHelper.SKIP
        record = dictionary.get("record") if dictionary.get("record") else APIHelper.SKIP
        to = dictionary.get("to") if dictionary.get("to") else APIHelper.SKIP
        to_alt = dictionary.get("toAlt") if dictionary.get("toAlt") else APIHelper.SKIP
        to_type = dictionary.get("toType") if dictionary.get("toType") else APIHelper.SKIP
        special = dictionary.get("special") if dictionary.get("special") else 'null'
        info = None
        if dictionary.get('info') is not None:
            info = [Info.from_dictionary(x) for x in dictionary.get('info')]
        else:
            info = APIHelper.SKIP
        # Return an object of this model
        return cls(mfrom,
                   id,
                   record,
                   to,
                   to_alt,
                   to_type,
                   special,
                   info)

    @classmethod
    def validate(cls, val):
        """Validates value against class schema

        Args:
            val: the value to be validated

        Returns:
            boolean : if value is valid against schema.

        """
        file_name = os.path.basename(__file__).removesuffix(".py")
        return SchemaValidatorWrapper.getValidator(APIHelper.get_schema_path(os.path.abspath(__file__), file_name)).is_valid(val)
