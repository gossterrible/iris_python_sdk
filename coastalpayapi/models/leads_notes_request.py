# -*- coding: utf-8 -*-

"""
coastalpayapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from coastalpayapi.api_helper import APIHelper
import os
from coastalpayapi.utilities.schema_validator_wrapper import SchemaValidatorWrapper
from jsonschema import ValidationError


class LeadsNotesRequest(object):

    """Implementation of the 'Leads Notes Request' model.

    TODO: type model description here.

    Attributes:
        tab (int): Tab Id
        note (string): Note text
        sticky (StickyEnum): Pin to top?
        notify_users (string): Comma separated list of user ids to notify or
            `all_assigned` to notify all users assigned to the lead

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "tab": 'tab',
        "note": 'note',
        "sticky": 'sticky',
        "notify_users": 'notify_users'
    }

    _optionals = [
        'notify_users',
    ]

    def __init__(self,
                 tab=None,
                 note=None,
                 sticky=None,
                 notify_users=APIHelper.SKIP):
        """Constructor for the LeadsNotesRequest class"""

        # Initialize members of the class
        self.tab = tab 
        self.note = note 
        self.sticky = sticky 
        if notify_users is not APIHelper.SKIP:
            self.notify_users = notify_users 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        tab = dictionary.get("tab") if dictionary.get("tab") else None
        note = dictionary.get("note") if dictionary.get("note") else None
        sticky = dictionary.get("sticky") if dictionary.get("sticky") else None
        notify_users = dictionary.get("notify_users") if dictionary.get("notify_users") else APIHelper.SKIP
        # Return an object of this model
        return cls(tab,
                   note,
                   sticky,
                   notify_users)

    @classmethod
    def validate(cls, val):
        """Validates value against class schema

        Args:
            val: the value to be validated

        Returns:
            boolean : if value is valid against schema.

        """
        file_name = os.path.basename(__file__).removesuffix(".py")
        return SchemaValidatorWrapper.getValidator(APIHelper.get_schema_path(os.path.abspath(__file__), file_name)).is_valid(val)
