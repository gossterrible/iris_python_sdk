# -*- coding: utf-8 -*-

"""
coastalpayapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from coastalpayapi.api_helper import APIHelper
from coastalpayapi.models.field import Field
import os
from coastalpayapi.utilities.schema_validator_wrapper import SchemaValidatorWrapper
from jsonschema import ValidationError


class LeadsRequest(object):

    """Implementation of the 'Leads Request' model.

    TODO: type model description here.

    Attributes:
        campaign (int): Campaign Id
        status (int): Status Id
        source (int): Source Id
        group (int): Group Id
        users (list of int): Ids of users to assign to a new lead
        users_emails (list of string): Emails of users to assign to a new
            lead
        fields (list of Field): Lead fields

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "status": 'status',
        "fields": 'fields',
        "campaign": 'campaign',
        "source": 'source',
        "group": 'group',
        "users": 'users',
        "users_emails": 'users_emails'
    }

    _optionals = [
        'campaign',
        'source',
        'group',
        'users',
        'users_emails',
    ]

    def __init__(self,
                 status=None,
                 fields=None,
                 campaign=APIHelper.SKIP,
                 source=APIHelper.SKIP,
                 group=APIHelper.SKIP,
                 users=APIHelper.SKIP,
                 users_emails=APIHelper.SKIP):
        """Constructor for the LeadsRequest class"""

        # Initialize members of the class
        if campaign is not APIHelper.SKIP:
            self.campaign = campaign 
        self.status = status 
        if source is not APIHelper.SKIP:
            self.source = source 
        if group is not APIHelper.SKIP:
            self.group = group 
        if users is not APIHelper.SKIP:
            self.users = users 
        if users_emails is not APIHelper.SKIP:
            self.users_emails = users_emails 
        self.fields = fields 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        status = dictionary.get("status") if dictionary.get("status") else None
        fields = None
        if dictionary.get('fields') is not None:
            fields = [Field.from_dictionary(x) for x in dictionary.get('fields')]
        campaign = dictionary.get("campaign") if dictionary.get("campaign") else APIHelper.SKIP
        source = dictionary.get("source") if dictionary.get("source") else APIHelper.SKIP
        group = dictionary.get("group") if dictionary.get("group") else APIHelper.SKIP
        users = dictionary.get("users") if dictionary.get("users") else APIHelper.SKIP
        users_emails = dictionary.get("users_emails") if dictionary.get("users_emails") else APIHelper.SKIP
        # Return an object of this model
        return cls(status,
                   fields,
                   campaign,
                   source,
                   group,
                   users,
                   users_emails)

    @classmethod
    def validate(cls, val):
        """Validates value against class schema

        Args:
            val: the value to be validated

        Returns:
            boolean : if value is valid against schema.

        """
        file_name = os.path.basename(__file__).removesuffix(".py")
        return SchemaValidatorWrapper.getValidator(APIHelper.get_schema_path(os.path.abspath(__file__), file_name)).is_valid(val)
