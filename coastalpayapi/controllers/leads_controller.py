# -*- coding: utf-8 -*-

"""
coastalpayapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from coastalpayapi.api_helper import APIHelper
from coastalpayapi.configuration import Server
from coastalpayapi.utilities.file_wrapper import FileWrapper
from coastalpayapi.controllers.base_controller import BaseController
from coastalpayapi.models.leads_response import LeadsResponse
from coastalpayapi.models.leads_response_1 import LeadsResponse1
from coastalpayapi.models.leads_response_2 import LeadsResponse2
from coastalpayapi.models.leads_response_3 import LeadsResponse3
from coastalpayapi.models.leads_tabs_fields_response import LeadsTabsFieldsResponse
from coastalpayapi.models.leads_records_record_id_response import LeadsRecordsRecordIdResponse
from coastalpayapi.models.lead_field import LeadField
from coastalpayapi.models.leads_fields_response import LeadsFieldsResponse
from coastalpayapi.models.leads_fields_order_response import LeadsFieldsOrderResponse
from coastalpayapi.models.lead_field_tab import LeadFieldTab
from coastalpayapi.models.leads_fields_tabs_response import LeadsFieldsTabsResponse
from coastalpayapi.models.leads_pricing_templates_response import LeadsPricingTemplatesResponse
from coastalpayapi.models.leads_notes_response import LeadsNotesResponse
from coastalpayapi.models.leads_notes_response_1 import LeadsNotesResponse1
from coastalpayapi.models.leads_appointments_response import LeadsAppointmentsResponse
from coastalpayapi.models.leads_appointments_response_1 import LeadsAppointmentsResponse1
from coastalpayapi.models.leads_applications_populate_response import LeadsApplicationsPopulateResponse
from coastalpayapi.models.leads_tasks_response import LeadsTasksResponse
from coastalpayapi.models.leads_tasks_response_1 import LeadsTasksResponse1
from coastalpayapi.models.leads_users_response import LeadsUsersResponse
from coastalpayapi.models.leads_users_response_1 import LeadsUsersResponse1
from coastalpayapi.models.leads_documents_response import LeadsDocumentsResponse
from coastalpayapi.models.leads_file_labels_response import LeadsFileLabelsResponse
from coastalpayapi.models.leads_emails_response import LeadsEmailsResponse
from coastalpayapi.models.leads_emails_templates_response import LeadsEmailsTemplatesResponse
from coastalpayapi.models.leads_sms_response import LeadsSmsResponse
from coastalpayapi.models.leads_sms_templates_response import LeadsSmsTemplatesResponse
from coastalpayapi.models.leads_activity_campaign_response import LeadsActivityCampaignResponse
from coastalpayapi.models.leads_activity_deletion_response import LeadsActivityDeletionResponse
from coastalpayapi.models.leads_activity_duplicates_response import LeadsActivityDuplicatesResponse
from coastalpayapi.models.leads_activity_links_response import LeadsActivityLinksResponse
from coastalpayapi.models.leads_activity_source_response import LeadsActivitySourceResponse
from coastalpayapi.models.leads_activity_status_response import LeadsActivityStatusResponse
from coastalpayapi.models.leads_campaigns_response import LeadsCampaignsResponse
from coastalpayapi.models.leads_groups_response import LeadsGroupsResponse
from coastalpayapi.models.leads_sources_response import LeadsSourcesResponse
from coastalpayapi.models.leads_statuses_response import LeadsStatusesResponse
from coastalpayapi.exceptions.unauthorized_error_exception import UnauthorizedErrorException
from coastalpayapi.exceptions.forbidden_error_exception import ForbiddenErrorException
from coastalpayapi.exceptions.validation_error_exception import ValidationErrorException
from coastalpayapi.exceptions.not_found_error_exception import NotFoundErrorException
from coastalpayapi.exceptions.server_error_exception import ServerErrorException


class LeadsController(BaseController):

    """A Controller to access Endpoints in the coastalpayapi API."""
    def __init__(self, config, auth_managers):
        super(LeadsController, self).__init__(config, auth_managers)

    def create_a_lead(self,
                      body):
        """Does a POST request to /leads.

        Create a lead

        Args:
            body (LeadsRequest): Lead details

        Returns:
            LeadsResponse: Response from the API. Lead has been created
                successfully

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 405:
            raise ValidationErrorException('Validation exception', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsResponse.from_dictionary)

        return decoded

    def get_a_list_of_leads(self,
                            page=None,
                            per_page=None,
                            sort_by=None,
                            sort_dir='asc',
                            group=None,
                            mid=None,
                            campaign=None,
                            source=None,
                            status=None,
                            category=None,
                            user=None,
                            date_filter=None,
                            start_date=None,
                            end_date=None,
                            email=None,
                            fields=None):
        """Does a GET request to /leads.

        Get a list of leads

        Args:
            page (int, optional): Page number
            per_page (PerPageEnum, optional): Count of records per page
            sort_by (SortByEnum, optional): Sorting of leads by the field
                value
            sort_dir (SortDirEnum, optional): Direction of sorting
            group (int, optional): Filter leads by a group id
            mid (int, optional): Filter leads by a merchant id
            campaign (int, optional): Filter leads by a campaign id
            source (int, optional): Filter leads by a source id
            status (int, optional): Filter leads by a status id
            category (int, optional): Filter leads by a status category id
            user (int, optional): Filter leads by a user id
            date_filter (DateFilterEnum, optional): Filtering leads by a date
                range depends on this filter
            start_date (datetime, optional): Filter leads by a date in ISO
                8601 format (Y-m-d\TH:i:sP) (**Please note that `+` sign
                should be encoded to `%2B`**)
            end_date (datetime, optional): Filter leads by a date in ISO 8601
                format (Y-m-d\TH:i:sP) (**Please note that `+` sign should be
                encoded to `%2B`**)
            email (string, optional): Filter leads by using an email address
            fields (string, optional): Filter leads by searching any lead
                field values. Search multiple values as an AND operation.

        Returns:
            LeadsResponse1: Response from the API. A JSON array of leads

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'page': page,
            'per_page': per_page,
            'sort_by': sort_by,
            'sort_dir': sort_dir,
            'group': group,
            'mid': mid,
            'campaign': campaign,
            'source': source,
            'status': status,
            'category': category,
            'user': user,
            'date_filter': date_filter,
            'start_date': APIHelper.when_defined(APIHelper.RFC3339DateTime, start_date),
            'end_date': APIHelper.when_defined(APIHelper.RFC3339DateTime, end_date),
            'email': email,
            'fields': fields
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 405:
            raise ValidationErrorException('Validation exception', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsResponse1.from_dictionary)

        return decoded

    def get_detailed_lead_information(self,
                                      lead_id):
        """Does a GET request to /leads/{leadId}.

        Get detailed lead information. If field has a default value, the `uid`
        field will be `null`

        Args:
            lead_id (int): Lead Id

        Returns:
            LeadsResponse2: Response from the API. Detailed lead information

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/{leadId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'leadId': {'value': lead_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsResponse2.from_dictionary)

        return decoded

    def update_a_lead(self,
                      lead_id,
                      body):
        """Does a PATCH request to /leads/{leadId}.

        Update a lead

        Args:
            lead_id (int): Lead Id
            body (LeadsRequest1): Lead changes (send only fields you want to
                change)

        Returns:
            LeadsResponse3: Response from the API. Lead has been updated
                successfully

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/{leadId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'leadId': {'value': lead_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.patch(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        elif _response.status_code == 405:
            raise ValidationErrorException('Validation exception', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsResponse3.from_dictionary)

        return decoded

    def get_lead_information_from_a_specific_tab(self,
                                                 lead_id,
                                                 tab_id):
        """Does a GET request to /leads/{leadId}/tabs/{tabId}/fields.

        Get lead information from a specific tab. If field has a default
        value, the `uid` field will be `null`

        Args:
            lead_id (int): Lead Id
            tab_id (int): Lead field tab Id

        Returns:
            LeadsTabsFieldsResponse: Response from the API. Lead information
                from a specific tab

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/{leadId}/tabs/{tabId}/fields'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'leadId': {'value': lead_id, 'encode': True},
            'tabId': {'value': tab_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        elif _response.status_code == 405:
            raise ValidationErrorException('Validation exception', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsTabsFieldsResponse.from_dictionary)

        return decoded

    def delete_record_from_a_lead_record_set(self,
                                             lead_id,
                                             cat_id,
                                             record_id):
        """Does a DELETE request to /leads/{leadId}/records/{catId}/{recordId}.

        The method allows deleting records from lead tabs with the type "set".
        Values of `catId` and `recordId` can be obtained by request [Get
        detailed lead information](#/paths/~1leads~1{leadId}/get)
        (`details.id` = `catId`, `details.record` = `recordId`).

        Args:
            lead_id (int): Lead Id
            cat_id (int): Record category ID
            record_id (int): Record ID

        Returns:
            LeadsRecordsRecordIdResponse: Response from the API. The record
                has been deleted successfully

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/{leadId}/records/{catId}/{recordId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'leadId': {'value': lead_id, 'encode': True},
            'catId': {'value': cat_id, 'encode': True},
            'recordId': {'value': record_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.delete(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        elif _response.status_code == 405:
            raise ValidationErrorException('Validation exception', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsRecordsRecordIdResponse.from_dictionary)

        return decoded

    def create_a_new_lead_field(self,
                                body=None):
        """Does a POST request to /leads/fields.

        Create a new lead field

        Args:
            body (LeadsFieldsRequest, optional): TODO: type description here.

        Returns:
            LeadField: Response from the API. Created field

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/fields'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        elif _response.status_code == 405:
            raise ValidationErrorException('Validation exception', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadField.from_dictionary)

        return decoded

    def get_a_list_of_available_lead_fields(self,
                                            page=None,
                                            per_page=None):
        """Does a GET request to /leads/fields.

        Get a list of available lead fields

        Args:
            page (int, optional): Page number
            per_page (PerPageEnum, optional): Count of records per page

        Returns:
            LeadsFieldsResponse: Response from the API. A list of available
                fields

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/fields'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'page': page,
            'per_page': per_page
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsFieldsResponse.from_dictionary)

        return decoded

    def get_a_lead_field(self,
                         field_id):
        """Does a GET request to /leads/fields/{fieldId}.

        Get a lead field

        Args:
            field_id (int): Field Id

        Returns:
            LeadField: Response from the API. Get a lead field

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/fields/{fieldId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'fieldId': {'value': field_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadField.from_dictionary)

        return decoded

    def update_a_lead_field(self,
                            field_id,
                            body=None):
        """Does a PATCH request to /leads/fields/{fieldId}.

        Update a field for the current lead

        Args:
            field_id (int): Field Id
            body (LeadsFieldsRequest, optional): TODO: type description here.

        Returns:
            LeadField: Response from the API. Updated field attributes

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/fields/{fieldId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'fieldId': {'value': field_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.patch(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        elif _response.status_code == 405:
            raise ValidationErrorException('Validation exception', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadField.from_dictionary)

        return decoded

    def update_a_lead_field_order_position(self,
                                           field_id,
                                           body=None):
        """Does a PATCH request to /leads/fields/{fieldId}/order.

        Update a lead field order position for the current Lead. You can send
        value equal to 0 and type 'increment' or 'decrement' to set the field
        as first or last in the field list.

        Args:
            field_id (int): Field Id
            body (LeadFieldOrder, optional): TODO: type description here.

        Returns:
            LeadsFieldsOrderResponse: Response from the API. Updated Lead
                field order position

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/fields/{fieldId}/order'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'fieldId': {'value': field_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.patch(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        elif _response.status_code == 405:
            raise ValidationErrorException('Validation exception', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsFieldsOrderResponse.from_dictionary)

        return decoded

    def create_a_lead_field_tab(self,
                                body=None):
        """Does a POST request to /leads/fields/tabs.

        Create a lead field tab

        Args:
            body (LeadFieldTab, optional): TODO: type description here.

        Returns:
            LeadFieldTab: Response from the API. Create a lead field tab

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/fields/tabs'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        elif _response.status_code == 405:
            raise ValidationErrorException('Validation exception', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadFieldTab.from_dictionary)

        return decoded

    def get_a_list_of_all_lead_field_tabs(self,
                                          page=None,
                                          per_page=None):
        """Does a GET request to /leads/fields/tabs.

        Get a list of all lead field tabs

        Args:
            page (int, optional): Page number
            per_page (PerPageEnum, optional): Count of records per page

        Returns:
            LeadsFieldsTabsResponse: Response from the API. A list of all lead
                field tabs

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/fields/tabs'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'page': page,
            'per_page': per_page
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsFieldsTabsResponse.from_dictionary)

        return decoded

    def get_a_lead_field_tab(self,
                             tab_id):
        """Does a GET request to /leads/fields/tabs/{tabId}.

        Get a lead field tab

        Args:
            tab_id (int): Lead field tab Id

        Returns:
            LeadFieldTab: Response from the API. Lead field tab

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/fields/tabs/{tabId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'tabId': {'value': tab_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadFieldTab.from_dictionary)

        return decoded

    def update_a_lead_field_tab(self,
                                tab_id,
                                body=None):
        """Does a PATCH request to /leads/fields/tabs/{tabId}.

        Update a lead field tab

        Args:
            tab_id (int): Lead field tab Id
            body (LeadFieldTab, optional): TODO: type description here.

        Returns:
            LeadFieldTab: Response from the API. Updated lead field tab

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/fields/tabs/{tabId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'tabId': {'value': tab_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.patch(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        elif _response.status_code == 405:
            raise ValidationErrorException('Validation exception', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadFieldTab.from_dictionary)

        return decoded

    def get_pricing_templates(self,
                              page=None,
                              per_page=None):
        """Does a GET request to /leads/pricing_templates.

        Get pricing templates

        Args:
            page (int, optional): Page number
            per_page (PerPage3Enum, optional): Count of records per page

        Returns:
            LeadsPricingTemplatesResponse: Response from the API. A list of
                pricing templates

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/pricing_templates'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'page': page,
            'per_page': per_page
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsPricingTemplatesResponse.from_dictionary)

        return decoded

    def create_a_lead_note(self,
                           lead_id,
                           body):
        """Does a POST request to /leads/{leadId}/notes.

        Create a lead note

        Args:
            lead_id (int): Lead Id
            body (LeadsNotesRequest): Create a lead note

        Returns:
            LeadsNotesResponse: Response from the API. Note has been added
                successfully

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/{leadId}/notes'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'leadId': {'value': lead_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        elif _response.status_code == 405:
            raise ValidationErrorException('Validation exception', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsNotesResponse.from_dictionary)

        return decoded

    def get_lead_notes(self,
                       lead_id,
                       page=None,
                       per_page=None):
        """Does a GET request to /leads/{leadId}/notes.

        Get lead notes

        Args:
            lead_id (int): Lead Id
            page (int, optional): Page number
            per_page (PerPage3Enum, optional): Count of records per page

        Returns:
            LeadsNotesResponse1: Response from the API. A list of lead notes

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/{leadId}/notes'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'leadId': {'value': lead_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'page': page,
            'per_page': per_page
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsNotesResponse1.from_dictionary)

        return decoded

    def create_a_lead_appointment(self,
                                  lead_id,
                                  body):
        """Does a POST request to /leads/{leadId}/appointments.

        Create a lead appointment

        Args:
            lead_id (int): Lead Id
            body (LeadsAppointmentsRequest): Create a lead appointment

        Returns:
            LeadsAppointmentsResponse: Response from the API. Appointment has
                been created successfully

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/{leadId}/appointments'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'leadId': {'value': lead_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        elif _response.status_code == 405:
            raise ValidationErrorException('Validation exception', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsAppointmentsResponse.from_dictionary)

        return decoded

    def get_lead_appointments(self,
                              lead_id,
                              page=None,
                              set_for=None,
                              set_by=None,
                              modified_by=None,
                              confirmed_by=None,
                              rescheduled_by=None,
                              seen_by=None,
                              rescheduled_count=None,
                              done=None,
                              per_page=None,
                              sort_by=None,
                              sort_dir=None,
                              date_filter=None,
                              start_date=None,
                              end_date=None):
        """Does a GET request to /leads/{leadId}/appointments.

        Get lead appointments

        Args:
            lead_id (int): Lead Id
            page (int, optional): Page number
            set_for (int, optional): Filter by the user for who appointment
                was created
            set_by (int, optional): Filter by the user for who have created an
                appointment
            modified_by (int, optional): Filter by the user for who have
                modified an appointment
            confirmed_by (int, optional): Filter by the user for who have
                confirmed an appointment
            rescheduled_by (int, optional): Filter by the user for who have
                rescheduled an appointment
            seen_by (int, optional): Filter by the user for who have mark an
                appointment as seen
            rescheduled_count (int, optional): Filter by the count of
                rescheduling
            done (bool, optional): Filter by the done flag
            per_page (PerPage3Enum, optional): Count of records per page
            sort_by (SortBy1Enum, optional): Sort appointments by columns
            sort_dir (SortDirEnum, optional): Sort direction
            date_filter (DateFilter1Enum, optional): Filtering appointments by
                a date range depends on this filter
            start_date (date, optional): Filter appointments by a date in
                format Y-m-d
            end_date (date, optional): Filter leads by a date in format Y-m-d

        Returns:
            LeadsAppointmentsResponse1: Response from the API. A list of lead
                appointments

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/{leadId}/appointments'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'leadId': {'value': lead_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'page': page,
            'set_for': set_for,
            'set_by': set_by,
            'modified_by': modified_by,
            'confirmed_by': confirmed_by,
            'rescheduled_by': rescheduled_by,
            'seen_by': seen_by,
            'rescheduled_count': rescheduled_count,
            'done': done,
            'per_page': per_page,
            'sort_by': sort_by,
            'sort_dir': sort_dir,
            'date_filter': date_filter,
            'start_date': start_date,
            'end_date': end_date
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsAppointmentsResponse1.from_dictionary)

        return decoded

    def populate_pdf_document(self,
                              lead_id,
                              application_id):
        """Does a POST request to /leads/{leadId}/applications/{applicationId}/populate.

        Populate a PDF document from a lead.

        Args:
            lead_id (int): Lead Id
            application_id (int): Application Id

        Returns:
            LeadsApplicationsPopulateResponse: Response from the API. Document
                populated successfully.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/{leadId}/applications/{applicationId}/populate'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'leadId': {'value': lead_id, 'encode': True},
            'applicationId': {'value': application_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        elif _response.status_code == 405:
            raise ValidationErrorException('Validation exception', _response)
        elif _response.status_code == 500:
            raise ServerErrorException('Unexpected server error', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsApplicationsPopulateResponse.from_dictionary)

        return decoded

    def create_a_lead_task(self,
                           lead_id,
                           body):
        """Does a POST request to /leads/{leadId}/tasks.

        Create a lead task

        Args:
            lead_id (int): Lead Id
            body (LeadsTasksRequest): Create a lead task

        Returns:
            LeadsTasksResponse: Response from the API. Task has been created
                successfully

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/{leadId}/tasks'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'leadId': {'value': lead_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        elif _response.status_code == 405:
            raise ValidationErrorException('Validation exception', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsTasksResponse.from_dictionary)

        return decoded

    def get_lead_tasks(self,
                       lead_id,
                       page=None,
                       per_page=None):
        """Does a GET request to /leads/{leadId}/tasks.

        Get lead tasks

        Args:
            lead_id (int): Lead Id
            page (int, optional): Page number
            per_page (PerPage3Enum, optional): Count of records per page

        Returns:
            LeadsTasksResponse1: Response from the API. A list of lead tasks

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/{leadId}/tasks'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'leadId': {'value': lead_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'page': page,
            'per_page': per_page
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsTasksResponse1.from_dictionary)

        return decoded

    def assign_a_user(self,
                      lead_id,
                      body):
        """Does a POST request to /leads/{leadId}/users.

        Assign a user

        Args:
            lead_id (int): Lead Id
            body (object): Create a lead task

        Returns:
            LeadsUsersResponse: Response from the API. User has been assigned
                successfully

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/{leadId}/users'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'leadId': {'value': lead_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.get_request_parameter(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        elif _response.status_code == 405:
            raise ValidationErrorException('Validation exception', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsUsersResponse.from_dictionary)

        return decoded

    def get_a_list_of_assigned_users(self,
                                     lead_id,
                                     page=None,
                                     per_page=None):
        """Does a GET request to /leads/{leadId}/users.

        Get a list of assigned users

        Args:
            lead_id (int): Lead Id
            page (int, optional): Page number
            per_page (PerPageEnum, optional): Count of records per page

        Returns:
            LeadsUsersResponse1: Response from the API. A list of assigned
                users

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/{leadId}/users'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'leadId': {'value': lead_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'page': page,
            'per_page': per_page
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsUsersResponse1.from_dictionary)

        return decoded

    def unassign_a_user_from_a_lead(self,
                                    lead_id,
                                    user_id):
        """Does a DELETE request to /leads/{leadId}/users/{userId}.

        Unassign a user from a lead

        Args:
            lead_id (int): Lead Id
            user_id (int): User Id

        Returns:
            LeadsUsersResponse: Response from the API. User has been
                unassigned successfully

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/{leadId}/users/{userId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'leadId': {'value': lead_id, 'encode': True},
            'userId': {'value': user_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.delete(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        elif _response.status_code == 405:
            raise ValidationErrorException('Validation exception', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsUsersResponse.from_dictionary)

        return decoded

    def upload_a_document(self,
                          lead_id,
                          tab,
                          label,
                          filename,
                          notify_users=None,
                          body=None):
        """Does a POST request to /leads/{leadId}/documents.

        Upload a document

        Args:
            lead_id (int): Lead Id
            tab (int): Tab Id
            label (int): Label Id
            filename (string): File name
            notify_users (string, optional): Comma separated list of user ids
                to notify or `all_assigned` to notify all users assigned to
                the lead
            body (typing.BinaryIO, optional): TODO: type description here.

        Returns:
            string: Response from the API. Document has been uploaded
                successfully

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/{leadId}/documents'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'leadId': {'value': lead_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'tab': tab,
            'label': label,
            'filename': filename,
            'notify_users': notify_users
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        if isinstance(body, FileWrapper):
            body_wrapper = body.file_stream
            body_content_type = body.content_type
        else:
            body_wrapper = body
            body_content_type = 'application/octet-stream'

        # Prepare files
        _files = {
            'body': (body_wrapper.name, body_wrapper, body_content_type)
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, files=_files)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        elif _response.status_code == 405:
            raise ValidationErrorException('Validation exception', _response)
        self.validate_response(_response)

        decoded = _response.text

        return decoded

    def get_a_list_of_available_documents(self,
                                          lead_id,
                                          page=None,
                                          per_page=None):
        """Does a GET request to /leads/{leadId}/documents.

        Get a list of available documents

        Args:
            lead_id (int): Lead Id
            page (int, optional): Page number
            per_page (PerPageEnum, optional): Count of records per page

        Returns:
            LeadsDocumentsResponse: Response from the API. A list of available
                documents

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/{leadId}/documents'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'leadId': {'value': lead_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'page': page,
            'per_page': per_page
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsDocumentsResponse.from_dictionary)

        return decoded

    def get_a_list_of_available_document_labels(self,
                                                page=None,
                                                per_page=None):
        """Does a GET request to /leads/file_labels.

        Get a list of all document labels available when uploading and
        downloading files

        Args:
            page (int, optional): Page number
            per_page (PerPage3Enum, optional): Count of records per page

        Returns:
            LeadsFileLabelsResponse: Response from the API. A list of
                available labels

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/file_labels'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'page': page,
            'per_page': per_page
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsFileLabelsResponse.from_dictionary)

        return decoded

    def download_a_document(self,
                            lead_id,
                            document_id):
        """Does a GET request to /leads/{leadId}/documents/{documentId}.

        Download a document

        Args:
            lead_id (int): Lead Id
            document_id (int): Document Id

        Returns:
            binary: Response from the API. Document

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/{leadId}/documents/{documentId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'leadId': {'value': lead_id, 'encode': True},
            'documentId': {'value': document_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request, binary=True)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        self.validate_response(_response)

        decoded = _response.text

        return decoded

    def send_an_email_to_lead_with_template(self,
                                            lead_id,
                                            template_id,
                                            body=None):
        """Does a POST request to /leads/{leadId}/emails/{templateId}.

        Send an email to lead with template

        Args:
            lead_id (int): Lead Id
            template_id (int): Template Id
            body (object, optional): TODO: type description here.

        Returns:
            LeadsEmailsResponse: Response from the API. Result of proccess

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/{leadId}/emails/{templateId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'leadId': {'value': lead_id, 'encode': True},
            'templateId': {'value': template_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.get_request_parameter(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        elif _response.status_code == 405:
            raise ValidationErrorException('Validation exception', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsEmailsResponse.from_dictionary)

        return decoded

    def get_a_list_of_email_templates(self):
        """Does a GET request to /leads/emails/templates.

        Get list of available email templates for a lead email

        Returns:
            LeadsEmailsTemplatesResponse: Response from the API. A list of
                available email templates

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/emails/templates'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        elif _response.status_code == 405:
            raise ValidationErrorException('Validation exception', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsEmailsTemplatesResponse.from_dictionary)

        return decoded

    def download_a_mailbox_email_attachment(self,
                                            lead_id,
                                            email_id,
                                            attachment_id):
        """Does a GET request to /leads/{leadId}/mailbox/{emailId}/attachment/{attachmentId}.

        Download a mailbox email attachment

        Args:
            lead_id (int): Lead Id
            email_id (int): Email Id
            attachment_id (int): Attachment Id

        Returns:
            binary: Response from the API. Document

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/{leadId}/mailbox/{emailId}/attachment/{attachmentId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'leadId': {'value': lead_id, 'encode': True},
            'emailId': {'value': email_id, 'encode': True},
            'attachmentId': {'value': attachment_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request, binary=True)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        self.validate_response(_response)

        decoded = _response.text

        return decoded

    def send_an_sms_to_lead_with_selected_sms_template(self,
                                                       lead_id,
                                                       template_id,
                                                       body=None):
        """Does a POST request to /leads/{leadId}/sms/{templateId}.

        Send an SMS to lead with selected SMS template.

        Args:
            lead_id (int): Lead Id
            template_id (int): Template Id
            body (object, optional): TODO: type description here.

        Returns:
            LeadsSmsResponse: Response from the API. Result of proccess

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/{leadId}/sms/{templateId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'leadId': {'value': lead_id, 'encode': True},
            'templateId': {'value': template_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.get_request_parameter(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        elif _response.status_code == 405:
            raise ValidationErrorException('Validation exception', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsSmsResponse.from_dictionary)

        return decoded

    def get_list_of_sms_templates(self):
        """Does a GET request to /leads/sms/templates.

        Get list of available SMS templates for sending SMS to a lead

        Returns:
            LeadsSmsTemplatesResponse: Response from the API. A list of
                available SMS templates

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/sms/templates'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        elif _response.status_code == 405:
            raise ValidationErrorException('Validation exception', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsSmsTemplatesResponse.from_dictionary)

        return decoded

    def get_a_list_of_all_lead_campaign_activity(self,
                                                 lead_id,
                                                 page=None,
                                                 per_page=None):
        """Does a GET request to /leads/{leadId}/activity/campaign.

        Get a list of all lead campaign activity

        Args:
            lead_id (int): Lead Id
            page (int, optional): Page number
            per_page (PerPageEnum, optional): Count of records per page

        Returns:
            LeadsActivityCampaignResponse: Response from the API. A list of
                activity

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/{leadId}/activity/campaign'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'leadId': {'value': lead_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'page': page,
            'per_page': per_page
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsActivityCampaignResponse.from_dictionary)

        return decoded

    def get_a_list_of_all_lead_deletion_activity(self,
                                                 lead_id,
                                                 page=None,
                                                 per_page=None):
        """Does a GET request to /leads/{leadId}/activity/deletion.

        Get a list of all lead deletion activity

        Args:
            lead_id (int): Lead Id
            page (int, optional): Page number
            per_page (PerPageEnum, optional): Count of records per page

        Returns:
            LeadsActivityDeletionResponse: Response from the API. A list of
                activity

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/{leadId}/activity/deletion'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'leadId': {'value': lead_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'page': page,
            'per_page': per_page
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsActivityDeletionResponse.from_dictionary)

        return decoded

    def get_a_list_of_all_lead_duplicate_activity(self,
                                                  lead_id,
                                                  page=None,
                                                  per_page=None):
        """Does a GET request to /leads/{leadId}/activity/duplicates.

        Get a list of all lead duplicate activity

        Args:
            lead_id (int): Lead Id
            page (int, optional): Page number
            per_page (PerPageEnum, optional): Count of records per page

        Returns:
            LeadsActivityDuplicatesResponse: Response from the API. A list of
                activity

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/{leadId}/activity/duplicates'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'leadId': {'value': lead_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'page': page,
            'per_page': per_page
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsActivityDuplicatesResponse.from_dictionary)

        return decoded

    def get_a_list_of_all_lead_links_activity(self,
                                              lead_id,
                                              page=None,
                                              per_page=None):
        """Does a GET request to /leads/{leadId}/activity/links.

        Get a list of all lead links activity

        Args:
            lead_id (int): Lead Id
            page (int, optional): Page number
            per_page (PerPageEnum, optional): Count of records per page

        Returns:
            LeadsActivityLinksResponse: Response from the API. A list of
                activity

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/{leadId}/activity/links'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'leadId': {'value': lead_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'page': page,
            'per_page': per_page
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsActivityLinksResponse.from_dictionary)

        return decoded

    def get_a_list_of_all_lead_source_activity(self,
                                               lead_id,
                                               page=None,
                                               per_page=None):
        """Does a GET request to /leads/{leadId}/activity/source.

        Get a list of all lead source activity

        Args:
            lead_id (int): Lead Id
            page (int, optional): Page number
            per_page (PerPageEnum, optional): Count of records per page

        Returns:
            LeadsActivitySourceResponse: Response from the API. A list of
                activity

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/{leadId}/activity/source'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'leadId': {'value': lead_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'page': page,
            'per_page': per_page
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsActivitySourceResponse.from_dictionary)

        return decoded

    def get_a_list_of_all_lead_status_activity(self,
                                               lead_id,
                                               page=None,
                                               per_page=None):
        """Does a GET request to /leads/{leadId}/activity/status.

        Get a list of all lead status activity

        Args:
            lead_id (int): Lead Id
            page (int, optional): Page number
            per_page (PerPageEnum, optional): Count of records per page

        Returns:
            LeadsActivityStatusResponse: Response from the API. A list of
                activity

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/{leadId}/activity/status'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'leadId': {'value': lead_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'page': page,
            'per_page': per_page
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsActivityStatusResponse.from_dictionary)

        return decoded

    def get_a_list_of_available_campaigns(self):
        """Does a GET request to /leads/campaigns.

        Get a list of available campaigns

        Returns:
            LeadsCampaignsResponse: Response from the API. A list of available
                campaigns

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/campaigns'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsCampaignsResponse.from_dictionary)

        return decoded

    def get_a_list_of_available_groups(self,
                                       status=None):
        """Does a GET request to /leads/groups.

        Get a list of available groups

        Args:
            status (int, optional): Status Id

        Returns:
            LeadsGroupsResponse: Response from the API. A list of available
                groups

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/groups'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'status': status
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsGroupsResponse.from_dictionary)

        return decoded

    def get_a_list_of_available_sources(self):
        """Does a GET request to /leads/sources.

        Get a list of available sources

        Returns:
            LeadsSourcesResponse: Response from the API. A list of available
                sources

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/sources'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsSourcesResponse.from_dictionary)

        return decoded

    def get_a_list_of_available_statuses(self,
                                         group=None):
        """Does a GET request to /leads/statuses.

        Get a list of available statuses

        Args:
            group (int, optional): Group Id

        Returns:
            LeadsStatusesResponse: Response from the API. A list of available
                statuses

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/statuses'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'group': group
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsStatusesResponse.from_dictionary)

        return decoded

    def get_a_list_of_available_users(self,
                                      page=None,
                                      per_page=None):
        """Does a GET request to /leads/users.

        Get a list of available users for assigning

        Args:
            page (int, optional): Page number
            per_page (PerPage3Enum, optional): Count of records per page

        Returns:
            LeadsUsersResponse1: Response from the API. A list of available
                users

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/users'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'page': page,
            'per_page': per_page
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsUsersResponse1.from_dictionary)

        return decoded
