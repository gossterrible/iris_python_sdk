# -*- coding: utf-8 -*-

"""
coastalpayapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from coastalpayapi.api_helper import APIHelper
from coastalpayapi.configuration import Server
from coastalpayapi.controllers.base_controller import BaseController
from coastalpayapi.models.leads_signatures_generate_response import LeadsSignaturesGenerateResponse
from coastalpayapi.models.leads_signatures_send_response import LeadsSignaturesSendResponse
from coastalpayapi.models.leads_signatures_response import LeadsSignaturesResponse
from coastalpayapi.models.brief_application_info import BriefApplicationInfo
from coastalpayapi.models.application_field import ApplicationField
from coastalpayapi.models.leads_applications_mappings_response import LeadsApplicationsMappingsResponse
from coastalpayapi.models.leads_applications_mappings_response_1 import LeadsApplicationsMappingsResponse1
from coastalpayapi.exceptions.unauthorized_error_exception import UnauthorizedErrorException
from coastalpayapi.exceptions.forbidden_error_exception import ForbiddenErrorException
from coastalpayapi.exceptions.not_found_error_exception import NotFoundErrorException
from coastalpayapi.exceptions.validation_error_exception import ValidationErrorException
from coastalpayapi.exceptions.server_error_exception import ServerErrorException


class ESignatureController(BaseController):

    """A Controller to access Endpoints in the coastalpayapi API."""
    def __init__(self, config, auth_managers):
        super(ESignatureController, self).__init__(config, auth_managers)

    def generate_an_e_signature_document(self,
                                         lead_id,
                                         application_id,
                                         body=None):
        """Does a POST request to /leads/{leadId}/signatures/{applicationId}/generate.

        Generate a new electronic signature document and receive a
        signature-ready application URL.

        Args:
            lead_id (int): Lead Id
            application_id (int): Application Id
            body (LeadsSignaturesGenerateRequest, optional): TODO: type
                description here.

        Returns:
            LeadsSignaturesGenerateResponse: Response from the API. New E-Sign
                application hash and link to signature

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/{leadId}/signatures/{applicationId}/generate'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'leadId': {'value': lead_id, 'encode': True},
            'applicationId': {'value': application_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        elif _response.status_code == 405:
            raise ValidationErrorException('Validation exception', _response)
        elif _response.status_code == 500:
            raise ServerErrorException('Unexpected server error', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsSignaturesGenerateResponse.from_dictionary)

        return decoded

    def send_an_e_signature_document(self,
                                     lead_id,
                                     application_id,
                                     body=None):
        """Does a POST request to /leads/{leadId}/signatures/{applicationId}/send.

        Send an e-signature document using an email template for signature.

        Args:
            lead_id (int): Lead Id
            application_id (int): Application Id
            body (LeadsSignaturesSendRequest, optional): TODO: type
                description here.

        Returns:
            LeadsSignaturesSendResponse: Response from the API. New E-Sign
                application hash and link to signature

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/{leadId}/signatures/{applicationId}/send'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'leadId': {'value': lead_id, 'encode': True},
            'applicationId': {'value': application_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        elif _response.status_code == 405:
            raise ValidationErrorException('Validation exception', _response)
        elif _response.status_code == 500:
            raise ServerErrorException('Unexpected server error', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsSignaturesSendResponse.from_dictionary)

        return decoded

    def download_an_e_signature_document(self,
                                         application_id):
        """Does a GET request to /leads/signatures/{applicationId}/download.

        Download an e-signature document.

        Args:
            application_id (int): Application Id

        Returns:
            binary: Response from the API. E-Sign document

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/signatures/{applicationId}/download'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'applicationId': {'value': application_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request, binary=True)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        elif _response.status_code == 405:
            raise ValidationErrorException('Validation exception', _response)
        elif _response.status_code == 500:
            raise ServerErrorException('Unexpected server error', _response)
        self.validate_response(_response)

        decoded = _response.text

        return decoded

    def get_a_list_of_all_lead_e_signatures_documents(self,
                                                      lead_id,
                                                      page=None,
                                                      per_page=None):
        """Does a GET request to /leads/{leadId}/signatures.

        Get a list of all lead e-signatures documents

        Args:
            lead_id (int): Lead Id
            page (int, optional): Page number
            per_page (PerPageEnum, optional): Count of records per page

        Returns:
            LeadsSignaturesResponse: Response from the API. A list with all
                lead e-signatures

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/{leadId}/signatures'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'leadId': {'value': lead_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'page': page,
            'per_page': per_page
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsSignaturesResponse.from_dictionary)

        return decoded

    def get_a_list_of_available_applications(self):
        """Does a GET request to /leads/applications.

        Get a list of available applications

        Returns:
            list of BriefApplicationInfo: Response from the API. A list of
                available applications

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/applications'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 405:
            raise ValidationErrorException('Validation exception', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, BriefApplicationInfo.from_dictionary)

        return decoded

    def create_a_new_application_field_mapping(self,
                                               app_id,
                                               body=None):
        """Does a POST request to /leads/applications/{appId}/mappings.

        Creation of new application field mapping

        Args:
            app_id (int): Application Id
            body (ApplicationField, optional): TODO: type description here.

        Returns:
            ApplicationField: Response from the API. Created new application
                field mapping

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/applications/{appId}/mappings'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'appId': {'value': app_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        elif _response.status_code == 405:
            raise ValidationErrorException('Validation exception', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, ApplicationField.from_dictionary)

        return decoded

    def get_a_list_of_available_application_field_mappings(self,
                                                           app_id,
                                                           page=None,
                                                           per_page=None):
        """Does a GET request to /leads/applications/{appId}/mappings.

        Get a list of available application field mappings

        Args:
            app_id (int): Application Id
            page (int, optional): Page number
            per_page (PerPageEnum, optional): Count of records per page

        Returns:
            LeadsApplicationsMappingsResponse: Response from the API. A list
                of available application field mappings

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/applications/{appId}/mappings'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'appId': {'value': app_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'page': page,
            'per_page': per_page
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsApplicationsMappingsResponse.from_dictionary)

        return decoded

    def get_an_application_field_mapping_list(self,
                                              app_id,
                                              map_id):
        """Does a GET request to /leads/applications/{appId}/mappings/{mapId}.

        Get an application field mapping list

        Args:
            app_id (int): Application Id
            map_id (int): Mapping Id

        Returns:
            ApplicationField: Response from the API. Application field
                mapping

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/applications/{appId}/mappings/{mapId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'appId': {'value': app_id, 'encode': True},
            'mapId': {'value': map_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, ApplicationField.from_dictionary)

        return decoded

    def update_an_application_field_mapping(self,
                                            app_id,
                                            map_id,
                                            body=None):
        """Does a PATCH request to /leads/applications/{appId}/mappings/{mapId}.

        Update an application field mapping

        Args:
            app_id (int): Application Id
            map_id (int): Mapping Id
            body (ApplicationField, optional): TODO: type description here.

        Returns:
            ApplicationField: Response from the API. Updated application field
                mapping

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/applications/{appId}/mappings/{mapId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'appId': {'value': app_id, 'encode': True},
            'mapId': {'value': map_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.patch(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        elif _response.status_code == 405:
            raise ValidationErrorException('Validation exception', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, ApplicationField.from_dictionary)

        return decoded

    def delete_an_application_field_mapping(self,
                                            app_id,
                                            map_id):
        """Does a DELETE request to /leads/applications/{appId}/mappings/{mapId}.

        Deletion of application field mapping

        Args:
            app_id (int): Application Id
            map_id (int): Mapping Id

        Returns:
            LeadsApplicationsMappingsResponse1: Response from the API. Updated
                application field mapping

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/leads/applications/{appId}/mappings/{mapId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'appId': {'value': app_id, 'encode': True},
            'mapId': {'value': map_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.delete(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise UnauthorizedErrorException('API key is missing or invalid', _response)
        elif _response.status_code == 403:
            raise ForbiddenErrorException('Not enough permissions', _response)
        elif _response.status_code == 404:
            raise NotFoundErrorException('Resource not found', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LeadsApplicationsMappingsResponse1.from_dictionary)

        return decoded
