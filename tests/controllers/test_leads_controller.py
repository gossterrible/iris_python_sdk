# -*- coding: utf-8 -*-

"""
coastalpayapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from tests.test_helper import TestHelper
from coastalpayapi.api_helper import APIHelper
from coastalpayapi.models.leads_fields_request import LeadsFieldsRequest
from coastalpayapi.models.lead_field_tab import LeadFieldTab


class LeadsControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(LeadsControllerTests, cls).setUpClass()
        cls.controller = cls.client.leads
        cls.response_catcher = cls.controller.http_call_back

    # Get a list of leads
    def test_get_a_list_of_leads(self):
        # Parameters for the API call
        page = None
        per_page = None
        sort_by = None
        sort_dir = 'asc'
        group = None
        mid = None
        campaign = None
        source = None
        status = None
        category = None
        user = None
        date_filter = None
        start_date = APIHelper.RFC3339DateTime.from_value('2019-01-01T12:04:40+05:00').datetime
        end_date = APIHelper.RFC3339DateTime.from_value('2019-01-01T12:04:40+05:00').datetime
        email = None
        fields = '?fields[field_id]=field_value&fields[field_id2]=field_value2'

        # Perform the API call through the SDK function
        result = self.controller.get_a_list_of_leads(page, per_page, sort_by, sort_dir, group, mid, campaign, source, status, category, user, date_filter, start_date, end_date, email, fields)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # Create a new lead field
    def test_create_a_new_lead_field(self):
        # Parameters for the API call
        body = None

        # Perform the API call through the SDK function
        result = self.controller.create_a_new_lead_field(body)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # Get a list of available lead fields
    def test_get_a_list_of_available_lead_fields(self):
        # Parameters for the API call
        page = None
        per_page = None

        # Perform the API call through the SDK function
        result = self.controller.get_a_list_of_available_lead_fields(page, per_page)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # Create a lead field tab
    def test_create_a_lead_field_tab(self):
        # Parameters for the API call
        body = None

        # Perform the API call through the SDK function
        result = self.controller.create_a_lead_field_tab(body)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # Get a list of all lead field tabs
    def test_get_a_list_of_all_lead_field_tabs(self):
        # Parameters for the API call
        page = None
        per_page = None

        # Perform the API call through the SDK function
        result = self.controller.get_a_list_of_all_lead_field_tabs(page, per_page)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # Get pricing templates
    def test_get_pricing_templates(self):
        # Parameters for the API call
        page = None
        per_page = None

        # Perform the API call through the SDK function
        result = self.controller.get_pricing_templates(page, per_page)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # Get a list of all document labels available when uploading and downloading files
    def test_get_a_list_of_available_document_labels(self):
        # Parameters for the API call
        page = None
        per_page = None

        # Perform the API call through the SDK function
        result = self.controller.get_a_list_of_available_document_labels(page, per_page)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # Get list of available email templates for a lead email
    def test_get_a_list_of_email_templates(self):

        # Perform the API call through the SDK function
        result = self.controller.get_a_list_of_email_templates()

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # Get list of available SMS templates for sending SMS to a lead
    def test_get_list_of_sms_templates(self):

        # Perform the API call through the SDK function
        result = self.controller.get_list_of_sms_templates()

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # Get a list of available campaigns
    def test_get_a_list_of_available_campaigns(self):

        # Perform the API call through the SDK function
        result = self.controller.get_a_list_of_available_campaigns()

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # Get a list of available groups
    def test_get_a_list_of_available_groups(self):
        # Parameters for the API call
        status = None

        # Perform the API call through the SDK function
        result = self.controller.get_a_list_of_available_groups(status)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # Get a list of available sources
    def test_get_a_list_of_available_sources(self):

        # Perform the API call through the SDK function
        result = self.controller.get_a_list_of_available_sources()

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # Get a list of available statuses
    def test_get_a_list_of_available_statuses(self):
        # Parameters for the API call
        group = None

        # Perform the API call through the SDK function
        result = self.controller.get_a_list_of_available_statuses(group)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


    # Get a list of available users for assigning
    def test_get_a_list_of_available_users(self):
        # Parameters for the API call
        page = None
        per_page = None

        # Perform the API call through the SDK function
        result = self.controller.get_a_list_of_available_users(page, per_page)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))


